{"paragraphs":[{"text":"// Import danych z csv do sparka\r\nval mainDataCentral = spark.read.format(\"org.apache.spark.csv\").option(\"header\", true).option(\"inferSchema\", true).csv(s\"/user/jankowalczyk38/us-accidents/mainDataCentral.csv\").cache();\r\nval mainDataEastern = spark.read.format(\"org.apache.spark.csv\").option(\"header\", true).option(\"inferSchema\", true).csv(s\"/user/jankowalczyk38/us-accidents/mainDataEastern.csv\").cache();\r\nval mainDataMountain = spark.read.format(\"org.apache.spark.csv\").option(\"header\", true).option(\"inferSchema\", true).csv(s\"/user/jankowalczyk38/us-accidents/mainDataMountain.csv\").cache();\r\nval mainDataPacific = spark.read.format(\"org.apache.spark.csv\").option(\"header\", true).option(\"inferSchema\", true).csv(s\"/user/jankowalczyk38/us-accidents/mainDataPacific.csv\").cache();\r\nval geoDataCentral = spark.read.format(\"org.apache.spark.csv\").option(\"header\", true).option(\"inferSchema\", true).csv(s\"/user/jankowalczyk38/us-accidents/geoDataCentral.csv\").cache();\r\nval geoDataEastern = spark.read.format(\"org.apache.spark.csv\").option(\"header\", true).option(\"inferSchema\", true).csv(s\"/user/jankowalczyk38/us-accidents/geoDataEastern.csv\").cache();\r\nval geoDataMountain = spark.read.format(\"org.apache.spark.csv\").option(\"header\", true).option(\"inferSchema\", true).csv(s\"/user/jankowalczyk38/us-accidents/geoDataMountain.csv\").cache();\r\nval geoDataPacific = spark.read.format(\"org.apache.spark.csv\").option(\"header\", true).option(\"inferSchema\", true).csv(s\"/user/jankowalczyk38/us-accidents/geoDataPacific.csv\").cache();\r\nval weatherToParse = spark.read.text(s\"/user/jankowalczyk38/us-accidents/weather.txt\")","user":"anonymous","dateUpdated":"2021-01-18T22:16:18+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"mainDataCentral: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [ID: string, Source: string ... 32 more fields]\nmainDataEastern: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [ID: string, Source: string ... 32 more fields]\nmainDataMountain: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [ID: string, Source: string ... 32 more fields]\nmainDataPacific: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [ID: string, Source: string ... 32 more fields]\ngeoDataCentral: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [Zipcode: string, City: string ... 4 more fields]\ngeoDataEastern: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [Zipcode: string, City: string ... 4 more fields]\ngeoDataMountain: org.apache.spark.sql.Dataset[org.apache.spark..."}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=0","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=1","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=2","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=3","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=4","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=5","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=6","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=7","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=8","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=9","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=10","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=11","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=12","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=13","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=14","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=15"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1610485405828_-828480642","id":"20210112-210325_369760821","dateCreated":"2021-01-12T21:03:25+0000","dateStarted":"2021-01-18T22:16:18+0000","dateFinished":"2021-01-18T22:16:59+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3529"},{"text":"\r\nimport java.text.SimpleDateFormat\r\nimport java.sql.Timestamp\r\n \r\nval mainData = mainDataMountain\r\n// val mainData = mainDataCentral\r\n//   .union(mainDataEastern)\r\n//   .union(mainDataMountain)\r\n//   .union(mainDataPacific)\r\n//   .dropDuplicates(Array(\"ID\"))\r\n  \r\nval geoData = geoDataCentral\r\n  .union(geoDataEastern)\r\n  .union(geoDataMountain)\r\n  .union(geoDataPacific)\r\n  .dropDuplicates(Array(\"Zipcode\"))\r\n\r\ndef getDateTime(dateTime: String): Timestamp = {\r\n    val format = new SimpleDateFormat(\"yyyy-dd-MM' 'HH:mm:ss\")\r\n    val x = format.parse(dateTime.dropRight(2))\r\n    return new Timestamp(x.getTime())\r\n}\r\n\r\ndef getCondition(line:String):String = {\r\n  return line.split(\"Condition: \")(1)\r\n}\r\n\r\nval weather = weatherToParse.map(line => {\r\n      val data = line.getString(0).split(\" \")\r\n      ( getDateTime(data(1) + \" \" + data(2)),\r\n        data(10),\r\n        data(19).dropRight(1), \r\n        data(26).dropRight(1),\r\n        getCondition(line.getString(0))\r\n        )\r\n    })\r\n    .withColumnRenamed(\"_1\", \"time\")\r\n    .withColumnRenamed(\"_2\", \"airport\")\r\n    .withColumnRenamed(\"_3\", \"temperature\")\r\n    .withColumnRenamed(\"_4\", \"humidity\")\r\n    .withColumnRenamed(\"_5\", \"conditition\")\r\n    .filter(($\"temperature\" !== \"~\") && ($\"humidity\" !== \"~\"))","user":"anonymous","dateUpdated":"2021-01-18T22:17:14+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there were two deprecation warnings; re-run with -deprecation for details\nimport java.text.SimpleDateFormat\nimport java.sql.Timestamp\nmainData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [ID: string, Source: string ... 32 more fields]\ngeoData: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [Zipcode: string, City: string ... 4 more fields]\ngetDateTime: (dateTime: String)java.sql.Timestamp\ngetCondition: (line: String)String\nweather: org.apache.spark.sql.Dataset[org.apache.spark.sql.Row] = [time: timestamp, airport: string ... 3 more fields]\n"}]},"apps":[],"jobName":"paragraph_1610485711410_-1011683404","id":"20210112-210831_142461798","dateCreated":"2021-01-12T21:08:31+0000","dateStarted":"2021-01-18T22:17:14+0000","dateFinished":"2021-01-18T22:17:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3530"},{"text":"mainData.schema","user":"anonymous","dateUpdated":"2021-01-18T22:17:21+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":146.4,"optionOpen":false}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1: org.apache.spark.sql.types.StructType = StructType(StructField(ID,StringType,true), StructField(Source,StringType,true), StructField(TMC,DoubleType,true), StructField(Severity,IntegerType,true), StructField(Start_Time,TimestampType,true), StructField(End_Time,TimestampType,true), StructField(Start_Lat,DoubleType,true), StructField(Start_Lng,DoubleType,true), StructField(End_Lat,DoubleType,true), StructField(End_Lng,DoubleType,true), StructField(Distance(mi),DoubleType,true), StructField(Description,StringType,true), StructField(Number,DoubleType,true), StructField(Street,StringType,true), StructField(Side,StringType,true), StructField(Zipcode,StringType,true), StructField(Airport_Code,StringType,true), StructField(Amenity,BooleanType,true), StructField(Bump,BooleanType,true), Stru..."}]},"apps":[],"jobName":"paragraph_1610993187378_-854413862","id":"20210118-180627_1927437255","dateCreated":"2021-01-18T18:06:27+0000","dateStarted":"2021-01-18T22:17:21+0000","dateFinished":"2021-01-18T22:17:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3531"},{"text":"spark.sql(\"show databases\").show()\r\nspark.sql(\"\"\"DROP TABLE IF EXISTS `w_place`\"\"\")\r\nspark.sql(\"\"\"DROP TABLE IF EXISTS `w_time`\"\"\")\r\nspark.sql(\"\"\"DROP TABLE IF EXISTS `w_weather`\"\"\")\r\nspark.sql(\"\"\"DROP TABLE IF EXISTS `w_sun`\"\"\")\r\nspark.sql(\"\"\"DROP TABLE IF EXISTS `f_facts`\"\"\")\r\n\r\nspark.sql(\"\"\"CREATE TABLE `w_place` (\r\n `Street` string,\r\n `City` string,\r\n `County` string,\r\n `State` string,\r\n `Zipcode` string,\r\n `id` long)\r\nROW FORMAT SERDE\r\n 'org.apache.hadoop.hive.ql.io.orc.OrcSerde'\r\nSTORED AS INPUTFORMAT\r\n 'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat'\r\nOUTPUTFORMAT\r\n 'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\"\"\")\r\n\r\nspark.sql(\"\"\"CREATE TABLE `w_time` (\r\n `hour` int,\r\n `day` int,\r\n `month` int,\r\n `quarter` int,\r\n `year` int,\r\n `id` long)\r\nROW FORMAT SERDE\r\n 'org.apache.hadoop.hive.ql.io.orc.OrcSerde'\r\nSTORED AS INPUTFORMAT\r\n 'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat'\r\nOUTPUTFORMAT\r\n 'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\"\"\")\r\n\r\nspark.sql(\"\"\"CREATE TABLE `w_sun` (\r\n `Sunrise_Sunset` string,\r\n `Civil_Twilight` string,\r\n `id` long)\r\n ROW FORMAT SERDE\r\n 'org.apache.hadoop.hive.ql.io.orc.OrcSerde'\r\nSTORED AS INPUTFORMAT\r\n 'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat'\r\nOUTPUTFORMAT\r\n 'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\"\"\")\r\n\r\nspark.sql(\"\"\"CREATE TABLE `w_weather` (\r\n  `time` timestamp,\r\n  `airport` string,\r\n  `temperature`double,\r\n  `humidity`double,\r\n  `weather_condition` string,\r\n  `id` long)\r\nROW FORMAT SERDE\r\n 'org.apache.hadoop.hive.ql.io.orc.OrcSerde'\r\nSTORED AS INPUTFORMAT\r\n 'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat'\r\nOUTPUTFORMAT\r\n 'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\"\"\")\r\n \r\n \r\n \r\n spark.sql(\"\"\"CREATE TABLE `f_facts` (\r\n`id` int,\r\n`accidents_per_hour` float,\r\n`sum_distance` float,\r\n`sum_severity` int,\r\n`is_intersection` boolean,\r\n`is_traffic_signal` boolean,\r\n`hll_accidents_count` float,\r\n`place_id` int,\r\n`time_id` int,\r\n`sun_id` int,\r\n`weather_id` int)\r\nROW FORMAT SERDE\r\n'org.apache.hadoop.hive.ql.io.orc.OrcSerde'\r\nSTORED AS INPUTFORMAT\r\n'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat'\r\nOUTPUTFORMAT\r\n'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'\"\"\")\r\n ","user":"anonymous","dateUpdated":"2021-01-18T22:32:45+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------------+\n|databaseName|\n+------------+\n|     default|\n+------------+\n\nres2: org.apache.spark.sql.DataFrame = []\n"}]},"apps":[],"jobName":"paragraph_1610485722078_623978607","id":"20210112-210842_1792603016","dateCreated":"2021-01-12T21:08:42+0000","dateStarted":"2021-01-18T22:17:23+0000","dateFinished":"2021-01-18T22:17:25+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3532"},{"text":"mainData.schema","user":"anonymous","dateUpdated":"2021-01-18T22:17:29+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res3: org.apache.spark.sql.types.StructType = StructType(StructField(ID,StringType,true), StructField(Source,StringType,true), StructField(TMC,DoubleType,true), StructField(Severity,IntegerType,true), StructField(Start_Time,TimestampType,true), StructField(End_Time,TimestampType,true), StructField(Start_Lat,DoubleType,true), StructField(Start_Lng,DoubleType,true), StructField(End_Lat,DoubleType,true), StructField(End_Lng,DoubleType,true), StructField(Distance(mi),DoubleType,true), StructField(Description,StringType,true), StructField(Number,DoubleType,true), StructField(Street,StringType,true), StructField(Side,StringType,true), StructField(Zipcode,StringType,true), StructField(Airport_Code,StringType,true), StructField(Amenity,BooleanType,true), StructField(Bump,BooleanType,true), Stru..."}]},"apps":[],"jobName":"paragraph_1610993085406_1781538823","id":"20210118-180445_2050531007","dateCreated":"2021-01-18T18:04:45+0000","dateStarted":"2021-01-18T22:17:30+0000","dateFinished":"2021-01-18T22:17:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3533"},{"text":"// TIMEDATA \nimport org.apache.spark.sql._\nimport spark.implicits._\nimport java.time.LocalDateTime\nimport scala.collection.mutable.ListBuffer\n\n\ndef getStartDate(startDate:Timestamp) :LocalDateTime={\n    val date = startDate.toLocalDateTime().withMinute(0).withSecond(0)\n    val hour = date.getHour()\n    if(hour>=21)\n        return date.withHour(21)\n    else if(hour>=18)\n        return date.withHour(18)\n    else if(hour>=15)\n        return date.withHour(15)\n    else if(hour>=12)\n        return date.withHour(12)\n    else if(hour>=9)\n        return date.withHour(9)\n    else if(hour>=6)\n        return date.withHour(6)\n    else if(hour>=3)\n        return date.withHour(3)\n    else (hour>=0)\n        return date.withHour(0)\n}\n\ndef getTimeData(startTime:Timestamp,endTime:Timestamp):List[Timestamp] ={\n    var sDate = getStartDate(startTime)\n    val eDate = endTime.toLocalDateTime()\n    var dates = new ListBuffer[Timestamp]()\n    while(eDate.isAfter(sDate)){\n        dates += Timestamp.valueOf(sDate)\n        sDate = sDate.plusHours(3)\n    }\n    return dates.toList\n}\n\n\n\nval accdata = mainData.flatMap(row => {\n    getTimeData(row.get(4).asInstanceOf[Timestamp],row.get(5).asInstanceOf[Timestamp])\n    .map(x => (\n    row.get(0).asInstanceOf[String],\n    row.get(3).asInstanceOf[Int],\n    row.get(10).asInstanceOf[Double],\n    row.get(13).asInstanceOf[String],\n    row.get(15).asInstanceOf[String],\n    row.get(16).asInstanceOf[String],\n    row.get(19).asInstanceOf[Boolean] || row.get(24).asInstanceOf[Boolean],\n    row.get(28).asInstanceOf[Boolean],\n    row.get(30).asInstanceOf[String],\n    row.get(31).asInstanceOf[String],\n    x))\n}).withColumnRenamed(\"_1\", \"ID\")\n.withColumnRenamed(\"_2\", \"Severity\")\n.withColumnRenamed(\"_3\", \"Distance\")\n.withColumnRenamed(\"_4\", \"Street\")\n.withColumnRenamed(\"_5\", \"ZIPCODE\")\n.withColumnRenamed(\"_6\", \"AirPort\")\n.withColumnRenamed(\"_7\", \"Is_Intersection\")\n.withColumnRenamed(\"_8\", \"Signal\")\n.withColumnRenamed(\"_9\", \"Sunrise_Sunset\")\n.withColumnRenamed(\"_10\", \"Civil_Twilight\")\n.withColumnRenamed(\"_11\", \"Time\")","user":"anonymous","dateUpdated":"2021-01-18T22:17:32+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql._\nimport spark.implicits._\nimport java.time.LocalDateTime\nimport scala.collection.mutable.ListBuffer\ngetStartDate: (startDate: java.sql.Timestamp)java.time.LocalDateTime\ngetTimeData: (startTime: java.sql.Timestamp, endTime: java.sql.Timestamp)List[java.sql.Timestamp]\naccdata: org.apache.spark.sql.DataFrame = [ID: string, Severity: int ... 9 more fields]\n"}]},"apps":[],"jobName":"paragraph_1610986188013_-853245959","id":"20210118-160948_742929641","dateCreated":"2021-01-18T16:09:48+0000","dateStarted":"2021-01-18T22:17:33+0000","dateFinished":"2021-01-18T22:17:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3534"},{"text":"accdata.count()","user":"anonymous","dateUpdated":"2021-01-18T22:18:08+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res4: Long = 181077\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=16"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1610995341263_246530762","id":"20210118-184221_214212317","dateCreated":"2021-01-18T18:42:21+0000","dateStarted":"2021-01-18T22:18:08+0000","dateFinished":"2021-01-18T22:18:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3535"},{"text":"\r\n// W_PLACE\r\nval w_placeData = geoData.join(mainData, mainData(\"ZipCode\") === geoData(\"ZipCode\"))\r\n  .select(mainData(\"Street\"), geoData(\"City\"), geoData(\"County\"), geoData(\"State\"),geoData(\"Zipcode\"))\r\n  .distinct()\r\n  .withColumn(\"id\", monotonically_increasing_id+1)\r\n\r\n//w_SUN\r\nval w_sunData = accdata.select($\"Sunrise_Sunset\", $\"Civil_Twilight\")\r\n.distinct()\r\n.withColumn(\"id\", monotonically_increasing_id+1)\r\n\r\n//W_WEATHER\r\nval w_weatherData = weather.distinct().withColumn(\"id\", monotonically_increasing_id+1)\r\n\r\n//W_TIME\r\nval w_timeData = accdata.select(\r\n    hour($\"Time\").alias(\"hour\"),\r\n    dayofmonth($\"Time\").alias(\"day\"),\r\n    month($\"Time\").alias(\"month\"),\r\n    quarter ($\"Time\").alias(\"quarter\"),\r\n    year($\"Time\").alias(\"year\"),\r\n    $\"Time\".cast(\"long\").alias(\"id\")\r\n    )\r\n  .distinct().toDF()\r\n\r\n\r\n","user":"anonymous","dateUpdated":"2021-01-18T22:18:19+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"w_placeData: org.apache.spark.sql.DataFrame = [Street: string, City: string ... 4 more fields]\nw_sunData: org.apache.spark.sql.DataFrame = [Sunrise_Sunset: string, Civil_Twilight: string ... 1 more field]\nw_weatherData: org.apache.spark.sql.DataFrame = [time: timestamp, airport: string ... 4 more fields]\nw_timeData: org.apache.spark.sql.DataFrame = [hour: int, day: int ... 4 more fields]\n"}]},"apps":[],"jobName":"paragraph_1610485732925_625982013","id":"20210112-210852_217572129","dateCreated":"2021-01-12T21:08:52+0000","dateStarted":"2021-01-18T22:18:19+0000","dateFinished":"2021-01-18T22:18:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3536"},{"text":"val temporaryWeather = w_weatherData.join(accdata,w_weatherData(\"AirPort\")===accdata(\"AirPort\"))\n.select(accdata(\"id\"),accdata(\"Time\"),abs(accdata(\"time\").cast(\"long\")-w_weatherData(\"time\").cast(\"long\")).as(\"diff\"))\n.groupBy(\"id\",\"Time\")\n.min(\"diff\")","user":"anonymous","dateUpdated":"2021-01-18T22:18:22+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"temporaryWeather: org.apache.spark.sql.DataFrame = [id: string, Time: timestamp ... 1 more field]\n"}]},"apps":[],"jobName":"paragraph_1611003043155_1690988999","id":"20210118-205043_1642199706","dateCreated":"2021-01-18T20:50:43+0000","dateStarted":"2021-01-18T22:18:22+0000","dateFinished":"2021-01-18T22:18:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3537"},{"text":"val finalData =accdata\r\n.join(temporaryWeather,temporaryWeather(\"id\")===accdata(\"id\") && temporaryWeather(\"Time\")===accdata(\"Time\"))\r\n.join(w_timeData,w_timeData(\"id\")===accdata(\"Time\").cast(\"long\"))\r\n.join(w_placeData,w_placeData(\"ZipCode\")===accdata(\"ZipCode\") && w_placeData(\"Street\")===accdata(\"Street\"))\r\n.join(w_sunData,w_sunData(\"Sunrise_Sunset\")===accdata(\"Sunrise_Sunset\") && w_sunData(\"Civil_Twilight\")===accdata(\"Civil_Twilight\"))\r\n.join(w_weatherData,w_weatherData(\"AirPort\")===accdata(\"AirPort\") && abs(accdata(\"time\").cast(\"long\")-w_weatherData(\"time\").cast(\"long\")) === temporaryWeather(\"min(diff)\"))\r\n.select(\r\n    accdata(\"Is_Intersection\").as(\"is_intersection\"),\r\n    accdata(\"Signal\").as(\"is_traffic_signal\"),\r\n    accdata(\"Severity\"),\r\n    accdata(\"Distance\"),\r\n    w_timeData(\"id\").as(\"time_id\"),\r\n    w_placeData(\"id\").as(\"place_id\"),\r\n    w_sunData(\"id\").as(\"sun_id\"),\r\n    w_weatherData(\"id\").as(\"weather_id\")).groupBy(\"is_intersection\",\"is_traffic_signal\",\"time_id\",\"place_id\",\"sun_id\",\"weather_id\").agg(count(\"*\"),sum(\"Severity\"),sum(\"Distance\"))","user":"anonymous","dateUpdated":"2021-01-18T22:41:38+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"finalData: org.apache.spark.sql.DataFrame = [is_intersection: boolean, is_traffic_signal: boolean ... 7 more fields]\n"}]},"apps":[],"jobName":"paragraph_1610999837755_-481035984","id":"20210118-195717_1392330644","dateCreated":"2021-01-18T19:57:17+0000","dateStarted":"2021-01-18T22:41:38+0000","dateFinished":"2021-01-18T22:41:39+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3538"},{"user":"anonymous","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611010505639_-1416630894","id":"20210118-225505_1647303828","dateCreated":"2021-01-18T22:55:05+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4977"},{"text":"finalData.filter(x=> x.get(6).asInstanceOf[Long]>3).show()","user":"anonymous","dateUpdated":"2021-01-18T22:52:47+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=42","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=43","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=44","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=45","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=46","http://bigdatacluster3-m.europe-west3-a.c.adroit-coral-291815.internal:4040/jobs/job?id=47"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1611004968217_-1475751560","id":"20210118-212248_303787403","dateCreated":"2021-01-18T21:22:48+0000","dateStarted":"2021-01-18T22:52:47+0000","dateFinished":"2021-01-18T22:55:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3539","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+---------------+-----------------+----------+-------------+------------+-------------+--------+-------------+------------------+\n|is_intersection|is_traffic_signal|   time_id|     place_id|      sun_id|   weather_id|count(1)|sum(Severity)|     sum(Distance)|\n+---------------+-----------------+----------+-------------+------------+-------------+--------+-------------+------------------+\n|          false|            false|1551841200| 498216206374|927712935937| 343597390854|       5|           14|             8.083|\n|          false|            false|1552165200| 498216206374|927712935937|1451698947522|       4|           10|              0.03|\n|          false|            false|1474750800|1357209665570|523986010113| 214748370213|       6|           16|13.290000000000001|\n|          false|            false|1477018800|1357209665570|523986010113| 214748370213|       6|           16|13.290000000000003|\n|          false|            false|1552143600| 670014898261|523986010113|1065151890252|       6|           13|3.9650000190700005|\n|          false|            false|1552305600| 498216206374|927712935937| 266287974353|       4|           10|              0.03|\n|          false|            false|1512054000|1142461300751|523986010113|1365799602485|       4|           16|             1.381|\n|          false|            false|1477548000|1357209665570|523986010113| 214748370213|       6|           16|13.290000000000001|\n|          false|            false|1469610000|1357209665570|523986010113| 214748370213|       4|           12|12.080000000000002|\n|          false|            false|1471554000|1357209665570|523986010113| 214748370213|       6|           16|13.290000000000003|\n|          false|            false|1474297200|1357209665570|523986010113| 214748370213|       6|           16|13.290000000000003|\n|          false|            false|1549724400| 249108103203|523986010113|1297080124239|       4|           10|             0.347|\n|          false|            false|1551668400| 498216206374|927712935937| 343597390854|      11|           38| 56.40099999999999|\n|          false|            false|1475074800|1357209665570|523986010113| 214748370213|       6|           16|13.290000000000001|\n|          false|            false|1472634000|1357209665570|523986010113| 214748370213|       6|           16|13.290000000000003|\n|          false|            false|1476511200|1357209665570|523986010113| 214748370213|       6|           16|13.290000000000003|\n|          false|            false|1469502000|1357209665570|523986010113| 214748370213|       4|           12|12.080000000000002|\n|          false|            false|1474880400|1357209665570|523986010113| 214748370213|       6|           16|13.290000000000003|\n|          false|            false|1479924000| 979252543573|523986010113| 188978566422|       4|           16|1.2919999999999998|\n|          false|            false|1477450800|1357209665570|523986010113| 214748370213|       6|           16|13.290000000000003|\n+---------------+-----------------+----------+-------------+------------+-------------+--------+-------------+------------------+\nonly showing top 20 rows\n\n"}]}},{"text":"w_sunData.write.insertInto(\"w_sun\")\r\nw_placeData.write.insertInto(\"w_place\")\r\nw_weatherData.write.insertInto(\"w_weather\")\r\nw_timeData.write.insertInto(\"w_time\")","user":"anonymous","dateUpdated":"2021-01-18T20:08:22+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1610998859748_-959329478","id":"20210118-194059_1705542665","dateCreated":"2021-01-18T19:40:59+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:3540"},{"text":"//Wyświetlanie tabeli\r\nspark.sql(\"\"\"Select * from w_place\"\"\").show()\r\nspark.sql(\"\"\"Select * from w_time\"\"\").show()\r\nspark.sql(\"\"\"Select * from w_sun\"\"\").show()\r\nspark.sql(\"\"\"Select * from w_weather\"\"\").show()","user":"anonymous","dateUpdated":"2021-01-18T20:00:59+0000","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611000056770_709768760","id":"20210118-200056_1288602517","dateCreated":"2021-01-18T20:00:56+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:3541"}],"name":"PROJEKT","id":"2FVN4TC15","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}